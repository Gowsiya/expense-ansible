- name: configure backend server
  hosts: backend
  become: yes
  vars_prompt:
    - name: mysql_root_password
      prompt: enter the mysql root password
      private: false
  tasks:
  - name: install python dependecy packages 
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
    - PyMySQL
    - cryptography
    
  - name: disable nodejs package
    ansible.builtin.command: dnf module disable nodejs -y
  
  - name: enable nodejs20
    ansible.builtin.command: dnf module enable nodejs:20 -y

  - name: install nodejs
    ansible.builtin.package:
      name: "{{ item }}"
      state: present
    loop:
     - nodejs
     - mysql

  - name: add expense user
    ansible.builtin.user:
      name: expense
  
  - name: create a /app directory if it does not exist
    ansible.builtin.file:
      path: /app
      state: directory
  
  - name: Download the application code to created repository
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip
  
  - name: unarchive the file that is already in the remote mession
    ansible.builtin.unarchive:
      src: /tmp/backend.zip
      dest: /app
      remote_src: yes

  - name: install dependencies
    community.general.npm:
      path: /app  #Install packages based on package.json.

  - name: copy the backend.service
    ansible.builtin.copy:
      src: backend.service
      dest: /etc/systemd/system

  - name: import backend.sql schema into db
    community.mysql.mysql_db:
      state: import  #mysql -h <MYSQL-SERVER-IPADDRESS> -uroot -pExpenseApp@1 < /app/schema/backend.sql
      name: all
      login_user: root
      login_password: mysql_root_password
      login_host: mysql.gsdevops.online
      target: /app/schema

    - name: daemon reload and restart service
      ansible.builtin.systemd_service:
        state: restarted
        daemon_reload: true
        name: backend
        enabled: true